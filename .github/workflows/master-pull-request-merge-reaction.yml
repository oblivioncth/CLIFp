name: Master pull-request merge reaction
on:
  pull_request:
    types: [closed]
    branches:
    - 'master'
env:
  ci_bot_username: ObyBotCI
  ci_bot_email: 104651589+ObyBotCI@users.noreply.github.com
  artifacts_path: ${{ github.workspace }}/Artifacts
  zips_path: ${{ github.workspace }}/Zips
  
jobs:
  tag_master_and_sync_dev:
    name: Tag master merge commit, FF back to dev
    if: github.event.pull_request.merged == true
    runs-on: windows-latest
    outputs:
      version_tag: ${{ steps.tag_master.outputs.new_tag }}
      target_fp_version: ${{ steps.check_target_fp.outputs.fp_version }}
    steps:
    - name: Get project version
      id: get-proj-ver
      uses: oblivioncth/actions/cmake/get-project-version@dev
    - name: Set Git user to ObyBotCI
      uses: oblivioncth/actions/git/set-git-user-to-oby-bot@dev
    - name: Checkout Project
      id: proj-checkout
      uses: oblivioncth/actions/git/smart-checkout@dev
    - name: Get target FP version
      id: check_target_fp
      working-directory: ${{ steps.proj-checkout.outputs.path }}
      env:
        match_start: set\(TARGET_FP_VERSION_PREFIX
        match_end: \)
      run: |
        $project_lists = Get-Content -Raw CMakeLists.txt
        if(!($project_lists -match '(?<=${{ env.match_start }})(.*)(?=${{ env.match_end }})')){
          throw "Could not get target FP version!"
        }
        $target_version = "v$($Matches[1].Trim())"
        echo "fp_version=$target_version" >> $Env:GITHUB_OUTPUT
    - name: Tag master with new version tag
      id: tag_master
      working-directory: ${{ steps.proj-checkout.outputs.path }}
      env:
        new_version: ${{ steps.get-proj-ver.outputs.version }}
      run: |
        $new_tag = "v${Env:new_version}"
        echo "new_tag=$new_tag" >> $Env:GITHUB_OUTPUT
        git tag -a $new_tag -m "Release $new_tag"
        git push --tags
    - name: Move 'latest' tag
      working-directory: ${{ steps.proj-checkout.outputs.path }}
      run: |
        echo "Checking for 'latest' tag..."
        if(git tag -l latest){
          echo "Removing previous 'latest' tag..."
          git tag -d latest # Delete tag locally
          git push origin :refs/tags/latest # Delete tag remotely
        }
        else{
          echo "No tag to remove."
        }
        git tag -a latest -m "Latest Release"
        git push origin latest
    - name: Fast-forward merge master into to dev
      if: always()
      working-directory: ${{ steps.proj-checkout.outputs.path }}
      run: |
        git checkout dev
        git merge master --ff-only
        git push
  
  build_clifp_release_windows:
    name: Build CLIFp Release (Windows)
    needs: tag_master_and_sync_dev
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/build-clifp-windows.yml
    secrets:
      qt_ffynnon_cred: ${{ secrets.OBYBOT_FFYNNON_CREDS }}
      
  build_clifp_release_linux:
    name: Build CLIFp Release (Linux)
    needs: tag_master_and_sync_dev
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/build-clifp-linux.yml
    secrets:
      qt_ffynnon_cred: ${{ secrets.OBYBOT_FFYNNON_CREDS }}

  create-release:
    name: Create GitHub release
    needs: [build_clifp_release_windows, build_clifp_release_linux, tag_master_and_sync_dev]
    if: github.event.pull_request.merged == true
    runs-on: windows-latest
    steps:
    - name: Download built CLIFp artifacts
      uses: actions/download-artifact@v3
      with:
        path: ${{ env.artifacts_path }}
    - name: Zip up release artifacts
      run: |
        $artifact_folders = Get-ChildItem -Directory -Path "${{ env.artifacts_path }}"
        foreach($art_dir in $artifact_folders)
        {
          $name = $art_dir.name
          $path = $art_dir.fullname
          7z a "${{ env.zips_path }}/${name}.zip" "${path}/*"
        }
    - name: Generate release
      uses: softprops/action-gh-release@v1
      with:
        name: "CLIFp Release ${{ needs.tag_master_and_sync_dev.outputs.version_tag }} (Targets FP ${{ needs.tag_master_and_sync_dev.outputs.target_fp_version }})"
        tag_name: "${{ needs.tag_master_and_sync_dev.outputs.version_tag }}"
        fail_on_unmatched_files: true
        generate_release_notes: true
        files: |
          ${{ env.zips_path }}/*.zip
    
        