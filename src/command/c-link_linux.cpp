// Unit Include
#include "c-link.h"

// Qx Includes
#include <qx/linux/qx-applicationdesktopentry.h>

// Project Includes
#include "c-play.h"
#include "utility.h"

//===============================================================================================================
// CSHORTCUT
//===============================================================================================================

//-Instance Functions-------------------------------------------------------------
//Private:
ErrorCode CLink::createShortcut(const QString& name, const QDir& dir, QUuid id)
{
    // Add/update CLIFp icon set
    if(!Utility::installAppIconForUser())
    {
        static const QString iconErr = QStringLiteral("Failed to install shortcut icons.");
        mCore.postError(NAME, Qx::GenericError(Qx::GenericError::Critical, ERR_CREATE_FAILED, iconErr));
        return ErrorCode::INVALID_SHORTCUT_PARAM;
    }

    // Setup desktop entry
    Qx::ApplicationDesktopEntry ade;
    ade.setName(name);
    ade.setIcon(PROJECT_SHORT_NAME);
    QString args = CPlay::NAME + " -" + CPlay::CL_OPT_ID_S_NAME + ' ' + id.toString(QUuid::WithoutBraces);
    ade.setExec(CLIFP_DIR_PATH + '/' + CLIFP_CUR_APP_FILENAME + ' ' + args);
    ade.setPath(CLIFP_DIR_PATH);
    ade.setComment("Generated by " PROJECT_SHORT_NAME " " PROJECT_VERSION_STR);

    // Create entry
    QString filename = QStringLiteral("org.flashpoint.clifp.") + id.toString(QUuid::WithoutBraces) +
                       '.' + shortcutExtension();
    QString fullEntryPath = dir.absoluteFilePath(filename);
    Qx::IoOpReport writeReport = Qx::DesktopEntry::writeToDisk(fullEntryPath, &ade);

    // Check for write error
    if(writeReport.isFailure())
    {
        mCore.postError(NAME, Qx::GenericError(Qx::GenericError::Critical, ERR_CREATE_FAILED, writeReport.outcomeInfo()));
        return ErrorCode::INVALID_SHORTCUT_PARAM;
    }

    mCore.logEvent(NAME, LOG_EVENT_CREATED_SHORTCUT.arg(id.toString(QUuid::WithoutBraces), QDir::toNativeSeparators(fullEntryPath)));

    // Return success
    return ErrorCode::NO_ERR;
}

QString CLink::shortcutExtension() const { return "desktop"; };
