// Unit Include
#include "c-link.h"

// Qx Includes
#include <qx/linux/qx-applicationdesktopentry.h>

// Project Includes
#include "c-play.h"
#include "utility.h"

//===============================================================================================================
// CSHORTCUT
//===============================================================================================================

//-Instance Functions-------------------------------------------------------------
//Private:
ErrorCode CLink::createShortcut(const QString& name, const QDir& dir, QUuid id)
{
    // Add/update CLIFp icon set
    static const QString iconName = QStringLiteral(PROJECT_SHORT_NAME ".png");
    static const QString iconSrcBasePath = QStringLiteral(":/app");
    static const QStringList iconSizes = {
        "16x16",
        "32x32",
        "48x48",
        "256x256"
    };
    static const QDir iconDestBaseDir(QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation) +
            QStringLiteral("/icons/hicolor"));

    for(const QString& res : iconSizes)
    {
        QString resSpecificSubPath = res + "/apps";

        // Ensure path exists
        iconDestBaseDir.mkpath("./" + resSpecificSubPath);

        // Determine paths
        QString fullSrcPath = iconSrcBasePath + '/' + res + '/' + iconName;
        QString fullDestPath = iconDestBaseDir.absolutePath() + '/' + resSpecificSubPath + '/' + iconName;

        // Remove exiting file if it exists (icon could need to be updated), then copy the new icon
        if((QFile::exists(fullDestPath) && !QFile::remove(fullDestPath) ) || !QFile::copy(fullSrcPath, fullDestPath))
        {
            static const QString iconErr = QStringLiteral("Failed to install shortcut icons.");
            mCore.postError(NAME, Qx::GenericError(Qx::GenericError::Critical, ERR_CREATE_FAILED, iconErr));
            return ErrorCode::INVALID_SHORTCUT_PARAM;
        }
    }

    // Setup desktop entry
    Qx::ApplicationDesktopEntry ade;
    ade.setName(name);
    ade.setIcon(PROJECT_SHORT_NAME);
    QString args = CPlay::NAME + " -" + CPlay::CL_OPT_ID_S_NAME + ' ' + id.toString(QUuid::WithoutBraces);
    ade.setExec(CLIFP_DIR_PATH + '/' + PROJECT_EXECUTABLE_BASE_NAME + ' ' + args);
    ade.setPath(CLIFP_DIR_PATH);
    ade.setComment("Generated by " PROJECT_SHORT_NAME " " PROJECT_VERSION_STR);

    // Create entry
    QString filename = QStringLiteral("org.flashpoint.clifp.") + id.toString(QUuid::WithoutBraces) +
                       '.' + shortcutExtension();
    QString fullEntryPath = dir.absoluteFilePath(filename);
    Qx::IoOpReport writeReport = Qx::DesktopEntry::writeToDisk(fullEntryPath, &ade);

    // Check for write error
    if(writeReport.isFailure())
    {
        mCore.postError(NAME, Qx::GenericError(Qx::GenericError::Critical, ERR_CREATE_FAILED, writeReport.outcomeInfo()));
        return ErrorCode::INVALID_SHORTCUT_PARAM;
    }

    // Return success
    return ErrorCode::NO_ERR;
}

QString CLink::shortcutExtension() const { return "desktop"; };
